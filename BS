import java.io.*;
import java.util.*;
public class BS { // Creating the card game BS
	public static void main(String [] args) {
		
		Scanner sc = new Scanner(System.in);
		Deck deck = new Deck(false);
		deck.shuffle();
/**********************************************Step 1: Get the Number of Players**************************************************/		
		int numOfPlayers;
		System.out.println("Number of Players: ");		// Get the # of players from the
		numOfPlayers = Integer.parseInt(sc.nextLine());  // keyboard
		while(numOfPlayers > 4 || numOfPlayers <= 1) {
			System.out.println("Too many players, must be 2-4 players"); // Makes sure # of players
			System.out.println("Number of Players: ");				  // does not exceed 4
			numOfPlayers = Integer.parseInt(sc.nextLine());
		}
/**********************************************Step 1: Get the Number of Players**************************************************/		
	
/***************************************************Step 2: Deal the Cards********************************************************/
		ArrayList<ArrayList<Card>> hands = new ArrayList<>();
		int checkStart = deal(numOfPlayers, hands, deck);
		
		int sysExitIfTen = 0;
		while(checkStart != 1) {
			checkStart = deal(numOfPlayers, hands, deck);
			sysExitIfTen++;
			if(sysExitIfTen == 10)
				System.exit(0);
		}
		System.out.println(checkStart);
/*************************************************Step 2: Deal the Cards******************************************************/
		

	/*************************************************Step 3: Start the Pile******************************************************/	
		Stack<Card> thePile = new Stack<>();
		Card aceOfSpades = new Card(1,3);
		int index = 0;
		int placeHolder = 0; // Keeps track of the rotation, the next person after player who plays the ace of spades will go
		int cardValue = 2; // Keeps track of the number or face card that is supposed to be played 
		for(int i = 0; i < numOfPlayers; i++) {
			if(hands.get(i).contains(aceOfSpades))
				index = hands.get(i).indexOf(aceOfSpades);
			placeHolder = i;
			thePile.push(hands.get(i).get(index));
		}
		System.out.println("Player #" + (placeHolder+1) + " placed the Ace of Spades");
		if((numOfPlayers == 2 && placeHolder == 1) || (numOfPlayers == 3 && placeHolder == 2) || (numOfPlayers == 4 && placeHolder == 3))
			placeHolder = 0;
		else
			placeHolder++;
		System.out.println("Player #" + (placeHolder+1) + ", it is your turn");
	/*************************************************Step 3: Start the Pile******************************************************/
		
	/****************************************************Step 4: The Play*********************************************************/
		showTheHand(hands, placeHolder, cardValue);
		ArrayList<Integer> pileBound = new ArrayList<>(); // Will contain the index of the card(s) chosen to be played
		System.out.println("Card(s) you want to put in play: ");
		String line = sc.nextLine(); // Player will type from the keyboard the positions of the cards they want to play
		String[] lineNumbers = line.split(" "); // We take in these values as strings
		for(int i = 0; i < lineNumbers.length; i++) {
			int number = Integer.parseInt(lineNumbers[i]);
			number--;
			pileBound.add(number); // Parse ints from the string array into the arrayList
			if(number > hands.get(placeHolder).size() || number < 0) // POSSIBLE ERROR : Left side of || might be one off 
				pileBound.set(i, -1); // If there is a wrong position value typed in, it will change it to a -1 and it will not be pushed
		}
		
		// SIMPLY A PRECAUTION TO MAKE SURE THERE IS NO WRONG INPUT // 
		//int test1 = pileBound[0], test2 = pileBound[1], test3 = pileBound[2], test4 = pileBound[3];
		for(int x : pileBound) {
		while(x == -1) {
			System.out.println("Card(s) you want to put in play: "); // Restarts the card input process to the pile 
			line = sc.nextLine(); 
			lineNumbers = line.split(" "); 
			pileBound.clear();
			for(int i = 0; i < lineNumbers.length; i++) {
				int number = Integer.parseInt(lineNumbers[i]);
				number--;
				pileBound.add(number); 
				if(number > hands.get(placeHolder).size() || number < 0)
					pileBound.set(i, -1); // **POSSIBLE ERROR could be a problem if someone inputs wrong first as for loop will not check it
			}
		  }
		}
		// SIMPLY A PRECAUTION TO MAKE SURE THERE IS NO WRONG INPUT // 
		
// LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE LEFT OFF HERE //		
		for(int elem : pileBound) 
			hands.get(placeHolder).remove(elem); // Removes the cards that were put in play from the owner's hands
		
		int BSCounter = 0; // To keep track of how many cards were pushed onto the stack when the player plays his card(s)
		for(int i = 0; i < pileBound.size(); i++) {
				Card stackBound = hands.get(placeHolder).get(pileBound.get(i)); // Extracting the requested indexes sent from the playTheCard method
				thePile.push(stackBound);
				BSCounter++;
			}
		///////////////////////////////////////?LAST LEFT OFF HERE////////
		System.out.println(thePile.peek().getValue() + " Hey");
		System.out.println();
		showTheHand(hands, placeHolder, cardValue);
		System.out.println("Done");
	/****************************************************Step 4: The Play*********************************************************/
	
	}	// end of main //
	
	static int[] playTheCard(ArrayList<ArrayList<Card>> hands, int placeHolder) {
		Scanner sc = new Scanner(System.in);
		int [] pileBound = new int[4]; // Array of the cards the player is pushing onto the stack, max of 4 cards played
		System.out.println("Card(s) you want to put in play: ");
		String line = sc.nextLine(); // Player will type from the keyboard the positions of the cards they want to play
		String[] lineNumbers = line.split(" "); // We take in these values as strings
		for(int i = 0; i < lineNumbers.length; i++) { 
			pileBound[i] = Integer.parseInt(lineNumbers[i]); // Parse ints from the string array into the int array
			if(pileBound[i] > hands.get(placeHolder).size() + 1 || pileBound[i] < 1)
				pileBound[i] = -1; // If there is a wrong position value typed in, it will change it to a -1 and it will not be pushed
		}
		sc.close();
		return pileBound;
	}
	
	static void showTheHand(ArrayList<ArrayList<Card>> hands, int placeHolder, int cardValue) {
		System.out.println("Player #" + (placeHolder+1) + ", this is your hand: ");
		for(int i = 0; i < hands.get(placeHolder).size(); i++) {
			Card card = hands.get(placeHolder).get(i);
			System.out.println("(" + (i + 1) + ")" + " - VALUE: " + card.getValueAsString() + " SUIT: " + card.getSuitAsString());
		}
		System.out.println();
		if(cardValue == 1)
			System.out.println("The card value to play is an Ace");
		else if(cardValue == 11)
			System.out.println("The card value to play is a Jack");
		else if(cardValue == 12)
			System.out.println("The card value to play is a Queen");
		else if(cardValue == 13)
			System.out.println("The card value to play is a King");
		else
			System.out.println("The card value to play is " + cardValue);
	}
	
	static int deal(int numOfPlayers, ArrayList<ArrayList<Card>> hands, Deck deck) {
		deck.shuffle();
		Card dealtCard = new Card();
		ArrayList<Card> list1 = new ArrayList<>(); // Each list represents a hand that will have a certain amount of cards
		ArrayList<Card> list2 = new ArrayList<>(); // This will be 2 - 4 person game so there will be at most 4 hands
		ArrayList<Card> list3 = new ArrayList<>();
		ArrayList<Card> list4 = new ArrayList<>();
		int counter = 0;
		
		switch(numOfPlayers){ // Depending on the amount of players, the cards will be dealt differently
		case 2:
				for(int i = 0; i < 52/numOfPlayers; i++) { // 31 cards will be dealt to each player
					dealtCard = deck.dealCard();
					list1.add(dealtCard); // Player 1's hand
					counter++;
					dealtCard = deck.dealCard();
					list2.add(dealtCard); // Player 2's hand
					counter++;
				}
			hands.add(list1); // They are then added to the overall hands ArrayList
			hands.add(list2);
			break;
			
		case 4:
			for(int i = 0; i < 52/numOfPlayers; i++) {
				dealtCard = deck.dealCard();
				list1.add(dealtCard); // Player 1's hand
				counter++;
				dealtCard = deck.dealCard();
				list2.add(dealtCard); // Player 2's hand
				counter++;
				dealtCard = deck.dealCard();
				list3.add(dealtCard); // Player 3's hand
				counter++;
				dealtCard = deck.dealCard();
				list4.add(dealtCard); // Player 4's hand
				counter++;
			}
			hands.add(list1);
			hands.add(list2);
			hands.add(list3);
			hands.add(list4);
			break;
			
		default:
			for(int i = 0; i < 52/numOfPlayers; i++) {
				dealtCard = deck.dealCard();
				list1.add(dealtCard); // Player 1's hand
				counter++;
				dealtCard = deck.dealCard();
				list2.add(dealtCard); // Player 2's hand
				counter++;
				dealtCard = deck.dealCard();
				list3.add(dealtCard); // Player 3's hand
				counter++;
			}
			dealtCard = deck.dealCard(); // There will be 1 card left over 
			list1.add(dealtCard);		// Which will then be given to
			counter++;					// Player 1
			hands.add(list1);			
			hands.add(list2);
			hands.add(list3);
			break;
		}
		if(counter != 52)
			return -1;
		else 
			return 1;
	}
	

}
